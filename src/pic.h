// Copyright (c) 2014, 임경현 (dlarudgus20)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * @file pic.h
 * @date 2014. 4. 27.
 * @author dlarudgus20
 * @copyright The BSD (2-Clause) License
 */

#ifndef PIC_H_
#define PIC_H_

#include <stddef.h>
#include <stdint.h>

enum
{
	PIC_MASTER_PORT1 = 0x20,
	PIC_MASTER_PORT2 = 0x21,
	PIC_SLAVE_PORT1 = 0xa0,
	PIC_SLAVE_PORT2 = 0xa1,

	PIC_INTERRUPT_NUMBER = 0x20
};

enum
{
	PIC_IRQ_TIMER				= 0,
	PIC_IRQ_KEYBOARD			= 1,
	PIC_IRQ_SLAVE				= 2,
	PIC_IRQ_SERIAL1				= 3,
	PIC_IRQ_SERIAL2				= 4,
	PIC_IRQ_PARALLEL1			= 5,
	PIC_IRQ_FLOPPY				= 6,
	PIC_IRQ_PARALLEL2			= 7,
	PIC_IRQ_RTC					= 8,
	PIC_IRQ_MOUSE				= 12,
	PIC_IRQ_COPROCESSER			= 13,
	PIC_IRQ_HARDDISK1			= 14,
	PIC_IRQ_HARDDISK2			= 15
};
enum
{
	PIC_MASKBIT_TIMER			= 1 << PIC_IRQ_TIMER,
	PIC_MASKBIT_KEYBOARD		= 1 << PIC_IRQ_KEYBOARD,
	PIC_MASKBIT_SLAVE			= 1 << PIC_IRQ_SLAVE,
	PIC_MASKBIT_SERIAL1			= 1 << PIC_IRQ_SERIAL1,
	PIC_MASKBIT_SERIAL2			= 1 << PIC_IRQ_SERIAL2,
	PIC_MASKBIT_PARALLEL1		= 1 << PIC_IRQ_PARALLEL1,
	PIC_MASKBIT_FLOPPY			= 1 << PIC_IRQ_FLOPPY,
	PIC_MASKBIT_PARALLEL2		= 1 << PIC_IRQ_PARALLEL2,
	PIC_MASKBIT_RTC				= 1 << PIC_IRQ_RTC,
	PIC_MASKBIT_MOUSE			= 1 << PIC_IRQ_MOUSE,
	PIC_MASKBIT_COPROCESSER		= 1 << PIC_IRQ_COPROCESSER,
	PIC_MASKBIT_HARDDISK1		= 1 << PIC_IRQ_HARDDISK1,
	PIC_MASKBIT_HARDDISK2		= 1 << PIC_IRQ_HARDDISK2
};
enum
{
	PIC_INTERRUPT_TIMER			= PIC_INTERRUPT_NUMBER + PIC_IRQ_TIMER,
	PIC_INTERRUPT_KEYBOARD		= PIC_INTERRUPT_NUMBER + PIC_IRQ_KEYBOARD,
	PIC_INTERRUPT_SLAVE			= PIC_INTERRUPT_NUMBER + PIC_IRQ_SLAVE,
	PIC_INTERRUPT_SERIAL1		= PIC_INTERRUPT_NUMBER + PIC_IRQ_SERIAL1,
	PIC_INTERRUPT_SERIAL2		= PIC_INTERRUPT_NUMBER + PIC_IRQ_SERIAL2,
	PIC_INTERRUPT_PARALLEL1		= PIC_INTERRUPT_NUMBER + PIC_IRQ_PARALLEL1,
	PIC_INTERRUPT_FLOPPY		= PIC_INTERRUPT_NUMBER + PIC_IRQ_FLOPPY,
	PIC_INTERRUPT_PARALLEL2		= PIC_INTERRUPT_NUMBER + PIC_IRQ_PARALLEL2,
	PIC_INTERRUPT_RTC			= PIC_INTERRUPT_NUMBER + PIC_IRQ_RTC,
	PIC_INTERRUPT_MOUSE			= PIC_INTERRUPT_NUMBER + PIC_IRQ_MOUSE,
	PIC_INTERRUPT_COPROCESSER	= PIC_INTERRUPT_NUMBER + PIC_IRQ_COPROCESSER,
	PIC_INTERRUPT_HARDDISK1		= PIC_INTERRUPT_NUMBER + PIC_IRQ_HARDDISK1,
	PIC_INTERRUPT_HARDDISK2		= PIC_INTERRUPT_NUMBER + PIC_IRQ_HARDDISK2
};

/**
 * @brief PIC를 초기화합니다.
 */
void ckPicInitialize(void);

/**
 * @brief PIC 인터럽트를 마스크합니다.
 * @param[in] mask 마스크 비트입니다.
 */
void ckPicMaskInterrupt(uint16_t mask);

/**
 * @brief 특정 IRQ에 EOI를 보냅니다.
 * @param[in] irq EOI를 보낼 IRQ 번호입니다.
 */
void ckPicSendEOI(uint8_t irq);

#endif /* PIC_H_ */
